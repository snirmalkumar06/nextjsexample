// NOTE: This is an example for the Pages Router.
// This file would typically be located at `pages/posts/[id].tsx`.
// It will not work correctly inside the `app` directory.

import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from 'next';
import { FC } from 'react';

interface Post {
  id: number;
  title: string;
  body: string;
}

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

// The component receives the single post object as a prop.
const PostPage: FC<PageProps> = ({ post }) => {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.body}</p>
    </main>
  );
};

/**
 * getStaticPaths runs at build time to determine which dynamic paths
 * should be pre-rendered.
 */
export const getStaticPaths: GetStaticPaths = async () => {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts');
  const posts: Post[] = await res.json();

  // Create an array of path objects for the first 10 posts.
  const paths = posts.slice(0, 10).map((post) => ({
    params: { id: post.id.toString() },
  }));

  // fallback: 'blocking' means that if a page is not pre-built,
  // Next.js will server-render it on the first request and then cache it.
  return { paths, fallback: 'blocking' };
};

/**
 * getStaticProps runs at build time for each path generated by getStaticPaths.
 * It fetches the data for a single post.
 */
export const getStaticProps: GetStaticProps<{ post: Post }, { id: string }> = async (context) => {
  const id = context.params?.id;
  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);
  const post = await res.json();

  return {
    props: {
      post,
    },
    revalidate: 120, // Re-generate this post page every 2 minutes
  };
};

export default PostPage;
